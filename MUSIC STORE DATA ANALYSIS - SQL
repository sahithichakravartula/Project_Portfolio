/* Q1. Who is the senior-most employee based on job title? */

       SELECT * FROM employee
       ORDER BY levels DESC
       LIMIT 1;




/* Q2. Which countries have the most invoices? */

        SELECT billing_country, COUNT(invoice_id) as invoice_count
        FROM invoice 
        GROUP BY billing_country
        ORDER BY invoice_count DESC;



/* Q3. What are the top 3 values of the total invoice? */
       
       SELECT round(total, 2)
       FROM invoice
       ORDER by total DESC
       LIMIT 3;

/* Q4. Which city has the best customers? We would like to throw a music festival in the city where we make the most money. Write a query that returns one city that has the highest sum of invoice totals. Return both the city name and the sum of the total invoices. */
       
       SELECT billing_city as City , ROUND(SUM(total), 2) as Invoice_total
       FROM invoice
       GROUP BY billing_city
       ORDER BY Invoice_total DESC
       LIMIT 1;



/* Q5. Who is the best customer? The customer who has spent the most money will be declared as the best customer. Write a query that returns the customer that has spent the most money.*/

       SELECT c.customer_id, c.first_name, c.last_name, 
       ROUND(SUM(i.total), 2) as invoice_total
       FROM customer c
       JOIN invoice i
       ON c.customer_id = i.customer_id
       GROUP BY c.customer_id
       ORDER BY invoice_total DESC
       LIMIT 1;



/* Q6. Write a query to return the email, first name, last name and genre of all rock music listeners. Return your list ordered alphabetically by email starting with A. */
     
      SELECT distinct first_name, last_name, email_id
      FROM customer c
      JOIN invoice i
      ON c.customer_id = i.customer_id
      JOIN invoice_line il
      ON i.invoice_id = il.invoice_id 
      WHERE track_id in ( SELECT track_id from track t
				  JOIN genre g
				  ON t.genre_id = g.genre_id
				  WHERE g.name like 'Rock')
				 ORDER BY email_id ASC;



/* Q7. Letâ€™s invite the artists who have written the most rock music in our dataset. Write a query that returns the artist name and total track count of the top 10 rock bands. */
      
      SELECT a.artist_id, a.name, COUNT(a.artist_id) as track_count
      FROM artist a 
      JOIN album2 al ON a.artist_id = al.artist_id
      JOIN track t ON al.album_id = t.album_id
      JOIN genre g ON t.genre_id = g.genre_id
      WHERE g.name = 'Rock'
      GROUP BY a.artist_id 
      ORDER BY track_count DESC
      LIMIT 10;



/* Q8. Return all the track names that have a song length longer than the average song length. Return the name and the milliseconds for each track. Order by the song length with the longest songs listed. 	*/
    
     SELECT name, milliseconds as song_length
     FROM track
     WHERE milliseconds > (SELECT ROUND(AVG(milliseconds))
					 FROM track)
     order by song_length DESC;



/* Q9. Find how much amount is spent by each customer on artists. Write a query to return the customer name, artist name and total amount spent.*/ 

       WITH best_selling_artist as 
                          (SELECT a.artist_id, a.name as artist_name, 
	                                SUM(il.unit_price*il.quantity) as total_amount_spent
			FROM invoice_line il
			JOIN track t ON t.track_id = il.track_id
			JOIN album2 al ON al.album_id = t.album_id
			JOIN artist a ON a.artist_id = al.artist_id
			GROUP BY a.artist_id
			ORDER BY total_amount_spent DESC
			LIMIT 1)
			
SELECT  c.customer_id, CONCAT(c.first_name,' ', c.last_name) as customer_name, 
        bsa.artist_name, SUM(il.unit_price * il.quantity) as total_amount_spent
       FROM customer c
	   JOIN invoice i ON c.customer_id = i.customer_id
	   JOIN invoice_line il ON i.invoice_id = il.invoice_id
	   JOIN track t ON il.track_id = t.track_id
	   JOIN album2 al ON t.album_id = al.album_id
	   JOIN best_selling_artist bsa ON al.artist_id = bsa.artist_id
	   GROUP BY 1, 2, 3
	   ORDER BY total_amount_spent DESC;




/* Q10. We want to find out the most popular music genre for each country. We determine the most popular genre as the genre with the highest amount of purchases. Write a query that returns each country along with the top genre. For countries where the maximum number of purchases is shared, return all genres. */

         WITH popular_genre as
                            (SELECT c.country as country, g.name,
                                            g.genre_id, COUNT(il.quantity) as  purchases,
                                           ROW_NUMBER() OVER(PARTITION BY c.country ORDER BY COUNT(il.quantity) DESC) as RowNo
      FROM customer c 
      JOIN invoice i ON c.customer_id = i.customer_id
      JOIN invoice_line il ON i.invoice_id = il.invoice_id
      JOIN track t ON t.track_id = il.track_id
      JOIN genre g ON g.genre_id = t.genre_id
      GROUP BY 1, 2, 3
      ORDER BY c.country asc, purchases DESC)

      SELECT * FROM popular_genre WHERE RowNo <= 1;



/* Q11. Write a query that determines the customer that has spent the most for each country. Write a query that returns the country along with the top customer and how much they spent. For countries where the top amount spent is shared, provide all the customers who spent this amount. */

        WITH RECURSIVE customer_with_country as 
            (SELECT 
			 c.customer_id, CONCAT(c.first_name, ' ', c.last_name) as full_name, 
			 i.billing_country, ROUND(SUM(i.total), 2) as total_spending
			 FROM customer c 
			 JOIN invoice i ON c.customer_id = i.customer_id
		            GROUP BY 1, 2, 3
			 ORDER BY 1, 4 DESC),

max_country_spending as 
            (SELECT billing_country, MAX(total_spending) as max_spending
			FROM customer_with_country
			GROUP BY billing_country)

SELECT cc.customer_id, cc.billing_country, cc.full_name, cc.total_spending
FROM customer_with_country cc
JOIN max_country_spending m
ON cc.billing_country = m.billing_country
WHERE cc.total_spending = m.max_spending
ORDER BY 2;





